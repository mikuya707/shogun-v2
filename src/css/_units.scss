$tile-width: 98px;
$tile-height: 98px;

@mixin glow($color) {
    width: $tile-width;
    height: $tile-height;
    background-color: $color;
    animation: loopGlow 1s cubic-bezier(0.47, 0, 0.75, 0.72) infinite;
    &.front {
        transform: translateZ(10px);
    }
    &.back {
        transform: translateZ(-10px);
    }

    @keyframes loopGlow {
        0% { opacity: 0.1; }
        50% { opacity: 0.5; }
        100% { opacity: 0.1; }
    }
}

.cellContainer {
    width: $tile-width;
    height: $tile-height;
    position: relative;
    perspective: 600px;
}

.tile {
    width: 100%;
    height: 100%;
    position: absolute;
    transform: translateZ(-5px);
    transform-style: preserve-3d;
    transition: transform 1s;
    .unit ~ figure {
        margin: 0;
        display: block;
        position: absolute;
        background-size: contain;
        background-repeat: no-repeat;
        pointer-events: none;
    }
    .lastMovedTo ~ figure {
        border: 3px solid #379000;
    }
}

.lastMovedFrom {
    background-color: #d1edbf;
}

.unit {
    width: $tile-width;
    height: $tile-height;
    background-size: contain;
    top: 0px;
    left: 0px;
    position: absolute;
}

.selected {
    width: 100%;
    height: 100%;
    position: absolute;
    box-shadow: 0px 2px 12px #777;
    animation: float 1s linear infinite;
    @keyframes float {
        50% {
            box-shadow: 4px 7px 12px #777;
            transform: translateY(-7px);
        }
    } 
}

.litup {
    @include glow(#ff5555);
}

.strikable {
    @include glow(yellow);
}

.canDrop {
    @include glow(#00ffd2);
}

.tile {
    .unit {
        ~ .front-face {
            width: $tile-width;
            height: $tile-height;
            transform: rotateY( 0deg) translateZ( 5px);
            &.opponent {
                transform: rotateY( 0deg) rotateZ( 180deg) translateZ( 5px);
            }
            &.draw-preview {
                width: 146px; height: 146px;
            }

        }
        ~ .back-face {
            width: $tile-width;
            height: $tile-height;
            transform: rotateY( 180deg) translateZ( 5px);
            &.opponent {
                transform: rotateY( 180deg) rotateZ( 180deg) translateZ( 5px);
            }
            &.draw-preview {
                width: 146px; height: 146px;
            }
        }
        ~ .left-face {
            width: 10px;
            height: $tile-height;
            left: 45px;
            transform: rotateY( -90deg) translateZ( 50px);
            background-color: #ccc;
            border: 2px solid black;
        }
        ~ .right-face {
            width: 10px;
            height: $tile-height;
            left: 42px;
            transform: rotateY( 90deg) translateZ( 50px);
            background-color: #ccc;
            border: 2px solid black;
        }
        ~ .top-face {
            width: $tile-width;
            height: 8px;
            transform: rotateX( 90deg) translateZ( 50px);
        }
        ~ .bottom-face {
            width: $tile-width;
            height: 8px;
            transform: rotateX( -90deg) translateZ( 50px);
        }
    }
    &.front {
        transform: translateZ( -5px) rotateY( 0deg);
    }
    &.back {
        transform: translateZ( -5px) rotateY( -180deg);
    }
    &.left {
        transform: translateZ( -50px) rotateY( 90deg);
    }
    &.right {
        transform: translateZ( -50px) rotateY( -90deg);
    }
    &.top {
        transform: translateZ( -50px) rotateX( -90deg);
    }
    &.bottom {
        transform: translateZ( -50px) rotateX( 90deg);
    }
}

.tile.white-front:not(.black),
.tile.black-front:not(.white) {
    transition: transform 0s;
    transform: translateZ( -5px) rotateY( 0deg);
}
.tile.white-back:not(.black),
.tile.black-back:not(.white) {
    transition: transform 0s;
   transform: translateZ( -5px) rotateY( -180deg); 
}

.tile.flip {
    &.front {
        animation: peekAtBack 3s linear 1;
        @keyframes peekAtBack {
           20% { transform: translateZ( -5px) rotateY( -180deg); }
           80% { transform: translateZ( -5px) rotateY( -180deg); }
           100% { transform: translateZ( -5px) rotateY( 0deg); }          
        }
    }
    &.back {
        animation: peekAtFront 3s linear 1;
        @keyframes peekAtFront {
            20% { transform: translateZ( -5px) rotateY( 0deg); }
            80% { transform: translateZ( -5px) rotateY( 0deg); }
            100% { transform: translateZ( -5px) rotateY( -180deg); }         
        }        
    }
}


$units: Assassin, Bowman, Champion, Dragoon, Duchess, 
        Duke, Footman, General, Knight, Longbowman, 
        Marshall, Oracle, Pikeman, Priest, Ranger, 
        Seer, Wizard;

@each $unit in $units {
    .#{$unit} { 
        &.white {
            ~ .front-face {
                background-image: url("/img/" + #{$unit} + "_front.png");
            }
            ~ .back-face {
                background-image: url("/img/" + #{$unit} + "_back.png");
            }
        }
        &.black {
            ~ .front-face {
                background-image: url("/img/" + #{$unit} + "_front_black.png");
            }
            ~ .back-face {
                background-image: url("/img/" + #{$unit} + "_back_black.png");
            }
        }
     }
}
